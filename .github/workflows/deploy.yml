name: Matchapp Server CI/CD
on:
  push:
    branches: ['master']

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  AWS_REGION: us-east-1
  PRIVATE_SSH_KEY: ${{secrets.PRIVATE_SSH_KEY}}

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.server_public_ip }}
      CLIENT_PUBLIC_IP: ${{ steps.set-ip.outputs.client_public_ip }}
    steps:
      - name: Checkout
        uses: actions/Checkout@v2
      - name: setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=us-east-1"
        working-directory: ./terraform
      - name: Terraform plan
        id: plan
        run: |-
          terraform plan \
          -out=PLAN
        working-directory: ./terraform
      - name: Terraform apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: Set outputs
        id: set-ip
        run: |-
          echo "::set-output name=server_public_ip::$(terraform output Devinis-sever_public_ip)"
          echo "::set-output name=client_public_ip::$(terraform output Devinis-client_public_ip)"
        working-directory: ./terraform

  deploy-server:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set IP env variable
        run:  |-
          echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
      - name: Deploy server to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key:  ${{ env.PRIVATE_SSH_KEY }}
          envs: PRIVATE_SSH_KEY,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
          script: |-
            sudo apt-get update
            sudo apt-get install git -y
            echo "--NODE & NPM--"
            echo "--INSTALL NVM TO USE A SPECIFIC NODE VERSION--"
            sudo apt-get install curl
            sudo curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" 
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install 18
            sudo apt install npm -y
            echo "-----PM2------"
            sudo npm install -g pm2
            sudo pm2 startup systemd
            echo "-----NGINX------"
            sudo apt-get install -y nginx
            echo "---FIREWALL---"
            sudo ufw allow OpenSSH
            sudo ufw allow 'Nginx Full'
            sudo ufw --force enable 
            cd /home/ubuntu
            sudo rm -rf memories-server
            git clone https://github.com/Eunice2000/Devinis-shop.git
            cd Devinis-shop
            npm install
            cd backend
            sudo rm /etc/nginx/sites-available/default
            sudo cp default /etc/nginx/sites-available/ -r
            sudo pm2 kill 
            pm2 start server.js
            sudo systemctl kill nginx || true
            sudo systemctl restart nginx


  ddeploy-client:
    runs-on: ubuntu-latest
    needs: [deploy-infra, deploy-server]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set IP env variable
        run:  |-
          echo CLIENT_PUBLIC_IP=${{ needs.deploy-infra.outputs.CLIENT_PUBLIC_IP }} >> $GITHUB_ENV
          echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
      - name: Deploy client to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.CLIENT_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: PRIVATE_SSH_KEY,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
          script: |-
            sudo apt-get update
            sudo apt-get install git -y
            echo "--NODE & NPM--"
            echo "--INSTALL NVM TO USE A SPECIFIC NODE VERSION--"
            sudo apt-get install curl
            sudo curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" 
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install 18
            sudo apt install npm -y
            echo "-----PM2------"
            sudo npm install -g pm2
            sudo pm2 startup systemd
            echo "-----NGINX------"
            sudo apt-get install -y nginx
            echo "---FIREWALL---"
            sudo ufw allow OpenSSH
            sudo ufw allow 'Nginx Full'
            sudo ufw --force enable 
            cd /home/ubuntu/
            sudo rm -rf Devinis || true
            git clone https://github.com/Eunice2000/Devinis-shop.git
            cd Devinis-shop/frontend
            npm install
            rm -rf build
            npm run build
            sudo pm2 delete react-build || true
            pm2 serve build/ 3000 -f --name "react-build" --spa
            sudo rm -rf /etc/nginx/sites-available/default
            sudo cp default /etc/nginx/sites-available/ -r
            sudo systemctl restart nginx